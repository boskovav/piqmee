package beast.evolution.tree;

import beast.core.Input;
import beast.core.parameter.RealParameter;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by boskovav on 29/04/15.
 */
public class QStree extends Tree {

    // TODO: the QS count can be input as Integer counts or as percentage (in case of percentage check it sums to 100)
//    public Input<TraitSet> QuasiSpeciesAttachmentTimesInput =
//            new Input<TraitSet>("QSAttachmentTimes","QS attachment times for each haplotype (excluding the one representative of each haplotype in the tree input)");
    // not necessary, when not input -- only at init, then we set all values to the median of the tree length
    public Input<TraitSet> quasiSpeciesCountsInput =
            new Input<TraitSet>("quasiSpeciesCounts","QS counts for each haplotype (excluding the one representative of each haplotype in the tree input)", Input.Validate.REQUIRED);
    // necessary - we need to know which tips map to which haplotype

    protected ArrayList<Double[]> attachmentTimesList;

    protected TraitSet quasiSpeciesCounts;
    protected String typeLabel;

    public void initAndValidate() throws Exception {

        super.initAndValidate();

        quasiSpeciesCounts = quasiSpeciesCountsInput.get();
        typeLabel = quasiSpeciesCounts.getTraitName();

        initAttachmentTimes();

    }

    public void initAttachmentTimes(){

        attachmentTimesList = new ArrayList<>(this.getLeafNodeCount());

        for (Node node : this.getExternalNodes()){

            attachmentTimesList.set(node.getNr(),new Double[(int) Math.round((Double) node.getMetaData(typeLabel))]); // todo check if getNr() always returns the same
//            attachmentTimesList.set(node.getNr(),new Double[Integer.getInteger(quasiSpeciesCounts.getStringValue(node.getNr()))]);
        }

    }


}
