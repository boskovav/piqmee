<beast version='2.0'
       namespace='beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.base.evolution.tree.coalescent:beast.pkgmgmt:beast.base.core:beast.base.inference.util:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.math.distributions
                 :beastfx.app.inputeditor
                 :piqmee.operators
                 :piqmee.distributions'
       templateinfo='template for birth-death skyline model with duplicate sequences (Quasi-species model)'>

    <map name='connect' reserved='true'>beastfx.app.inputeditor.BeautiConnector</map>
    <map name='subtemplate' reserved='true'>beastfx.app.inputeditor.BeautiSubTemplate</map>
    <map name='Uniform'>beast.base.inference.distribution.Uniform</map>
    <map name='Normal'>beast.base.inference.distribution.Normal</map>
    <map name='OneOnX'>beast.base.inference.distribution.OneOnX</map>
    <map name='LogNormal'>beast.base.inference.distribution.LogNormalDistributionModel</map>
    <map name='Exponential'>beast.base.inference.distribution.Exponential</map>
    <map name='Gamma'>beast.base.inference.distribution.Gamma</map>
    <map name='Beta'>beast.base.inference.distribution.Beta</map>
    <map name='LaplaceDistribution'>beast.base.inference.distribution.LaplaceDistribution</map>
    <map name='InverseGamma'>beast.base.inference.distribution.InverseGamma</map>
    <map name='prior'>beast.base.inference.distribution.Prior</map>

    <beauticonfig spec='beastfx.app.inputeditor.BeautiConfig'
        inputLabelMap='beast.base.inference.MCMC.operator=Operators,
	                   beast.base.inference.MCMC.logger=Loggers,
			           beast.base.evolution.sitemodel.SiteModel.mutationRate =Substitution Rate'
        inlinePlugins ='beast.base.inference.MCMC.distribution,
                        beast.base.evolution.sitemodel.SiteModel.substModel,
                        beast.base.evolution.tree.coalescent.ExponentialGrowth,
                        beast.base.evolution.tree.coalescent.ConstantPopulation,
                        beast.base.evolution.tree.coalescent.Coalescent,
                        beast.base.inference.State.stateNode'
        collapsedPlugins ='beast.base.inference.MCMC.logger'
        suppressPlugins = 'beast.base.inference.MCMC.operator,
    		               beast.base.inference.MCMC.operatorschedule,
    		               beast.base.inference.OperatorSchedule.subschedule,
    		               beast.base.inference.OperatorSchedule.operatorPattern,
    		               beast.base.inference.OperatorSchedule.operator,
	                       beast.base.inference.MCMC.state,
	                       beast.base.inference.MCMC.distribution,
	                       beast.base.inference.MCMC.init,
                           beast.base.evolution.substitutionmodel.WAG.rates,
                           beast.base.evolution.substitutionmodel.WAG.frequencies,
                           beast.base.evolution.substitutionmodel.JTT.rates,
                           beast.base.evolution.substitutionmodel.JTT.frequencies,
                           beast.base.evolution.substitutionmodel.Blosum62.rates,
                           beast.base.evolution.substitutionmodel.Blosum62.frequencies,
                           beast.base.evolution.substitutionmodel.Dayhoff.rates,
                           beast.base.evolution.substitutionmodel.Dayhoff.frequencies,
                           beast.base.evolution.substitutionmodel.CPREV.rates,
                           beast.base.evolution.substitutionmodel.CPREV.frequencies,
                           beast.base.evolution.substitutionmodel.MTREV.rates,
                           beast.base.evolution.substitutionmodel.MTREV.frequencies,
                           beast.base.evolution.substitutionmodel.GTR.rates,
                           beast.base.evolution.substitutionmodel.JukesCantor.frequencies,
                           beast.base.inference.distribution.Prior.x,
                           beast.base.evolution.tree.MRCAPrior.tree,
                           beast.base.evolution.tree.MRCAPrior.monophyletic,
                           beast.base.evolution.tree.MRCAPrior.taxonset,
                           beast.base.evolution.branchratemodel.UCRelaxedClockModel.tree,
                           beast.base.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
                           beast.base.evolution.branchratemodel.UCRelaxedClockModel.distr,
                           beast.base.evolution.branchratemodel.RandomLocalClockModel.tree,
                           beast.base.evolution.branchratemodel.RandomLocalClockModel.meanRate,
                           beast.base.evolution.branchratemodel.RandomLocalClockModel.indicators,
                           beast.base.evolution.operator.ScaleOperator.indicator,
                           beast.base.inference.Operator.weight,
                           beast.base.inference.Logger.model,
                           piqmee.tree.QuasiSpeciesTree,
	                       piqmee.tree.QuasiSpeciesTree.trait,
                           piqmee.tree.QuasiSpeciesTree.taxa,
                           piqmee.tree.QuasiSpeciesTree.taxonset,
                           piqmee.tree.QuasiSpeciesTree.nodetype,
                           piqmee.tree.QuasiSpeciesTree.haplotypeCounts,
                           piqmee.tree.QuasiSpeciesTree.data,
                           piqmee.tree.QuasiSpeciesTree.estimate,
                           piqmee.tree.QuasiSpeciesClusterTree.initial,
                           piqmee.tree.QuasiSpeciesClusterTree.trait,
                           piqmee.tree.QuasiSpeciesClusterTree.taxa,
                           piqmee.tree.QuasiSpeciesClusterTree.taxonset,
                           piqmee.tree.QuasiSpeciesClusterTree.nodetype,
                           piqmee.tree.QuasiSpeciesClusterTree.haplotypeCounts,
                           piqmee.tree.QuasiSpeciesClusterTree.data,
                           piqmee.tree.QuasiSpeciesClusterTree.estimate,
	                       piqmee.tree.QuasiSpeciesClusterTree.distance,
                           piqmee.tree.QuasiSpeciesRandomTree.initial,
                           piqmee.tree.QuasiSpeciesRandomTree.trait,
	                       piqmee.tree.QuasiSpeciesRandomTree.taxa,
	                       piqmee.tree.QuasiSpeciesRandomTree.taxonset,
	                       piqmee.tree.QuasiSpeciesRandomTree.nodetype,
                           piqmee.tree.QuasiSpeciesRandomTree.haplotypeCounts,
                           piqmee.tree.QuasiSpeciesRandomTree.data,
	                       piqmee.tree.QuasiSpeciesRandomTree.estimate,
	                       piqmee.tree.QuasiSpeciesTreeFromNewick.initial,
                           piqmee.tree.QuasiSpeciesTreeFromNewick.trait,
	                       piqmee.tree.QuasiSpeciesTreeFromNewick.taxa,
	                       piqmee.tree.QuasiSpeciesTreeFromNewick.taxonset,
	                       piqmee.tree.QuasiSpeciesTreeFromNewick.nodetype,
                           piqmee.tree.QuasiSpeciesTreeFromNewick.haplotypeCounts,
                           piqmee.tree.QuasiSpeciesTreeFromNewick.data,
                           piqmee.tree.QuasiSpeciesTreeFromNewick.estimate,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.intervalTimes,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.birthRate,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.deathRate,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.samplingRate,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.rho,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.contemp,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.S0,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.tree,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.treeIntervals,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.forceRateChange,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.conditionOnSurvival,
                           beast.base.inference.distribution.MarkovChainDistribution.parameter,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.reverseTimeArrays,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.originIsRootEdge,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.rhoSamplingTimes,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.deathRateChangeTimes,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.samplingRateChangeTimes,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.birthRateTimesRelative,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.deathRateTimesRelative,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.samplingRateTimesRelative,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.birthRateChangeTimes,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.removalProbabilityChangeTimes,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.removalProbability,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.turnOver,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.netDiversification,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.conditionOnRhoSampling,
	                       piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.taxon,
	                       piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.SAtaxon,
                           piqmee.operators.QuasiSpeciesHaplotypeScale.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesHaplotypeScale.origin,
                           piqmee.operators.QuasiSpeciesHaplotypeSwap.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesHaplotypeSwap.origin,
                           piqmee.operators.QuasiSpeciesSequenceAttachmentRandom.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesSequenceAttachmentRandom.origin,
                           piqmee.operators.QuasiSpeciesSequenceAttachmentUniform.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesSequenceAttachmentUniform.origin,
                           piqmee.operators.QuasiSpeciesSubtreeExchange.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesSubtreeExchange.origin,
                           piqmee.operators.QuasiSpeciesSubtreeExchangeEasy.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesSubtreeExchangeEasy.origin,
                           piqmee.operators.QuasiSpeciesTreeScale.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesTreeScale.origin,
                           piqmee.operators.QuasiSpeciesUCRelaxedClockCategoriesUniform.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesUCRelaxedClockCategoriesUniform.origin,
                           piqmee.operators.QuasiSpeciesUniform.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesUniform.origin,
                           piqmee.operators.QuasiSpeciesWilsonBalding.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesWilsonBalding.origin,
                           piqmee.operators.QuasiSpeciesWilsonBaldingEasy.quasiSpeciesTree,
                           piqmee.operators.QuasiSpeciesWilsonBaldingEasy.origin'>

        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png.x' forceExpansion='FALSE'
            type='beast.base.evolution.alignment.Alignment'/>

		<panel spec='BeautiPanelConfig' panelname="Tip Dates" tiptext="Specify times at which taxa were sampled"
            path='tree'
            hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
            isVisible='true'/>

        <panel spec='BeautiPanelConfig' panelname="Sequence Counts" tiptext="Specify total count of sequences representing each taxon"
            path='tree'
            hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
            isVisible='true'/>

        <panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png.x' forceExpansion='TRUE'/>

		<panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png.x' forceExpansion='TRUE'/>

		<panel spec='BeautiPanelConfig' panelname="Initialization" tiptext="Initial state"
            path='state/stateNode'
            hasPartitions="none" icon='6.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='true'/>

        <panel spec='BeautiPanelConfig' panelname="Starting tree" tiptext="Starting tree"
            path='init'
            hasPartitions="none" icon='6.png.x' forceExpansion='TRUE'
            isVisible='false'/>

		<panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png.x' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.base.inference.Distribution'/>

		<panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false' buttonStatus='ADD_ONLY'/>

		<panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png.x' forceExpansion='TRUE'/>

		<alignmentProvider id="Import Alignment" spec='BeautiAlignmentProvider' template='@StandardPartitionTemplate'/>


        <partitiontemplate id='StandardPartitionTemplate' spec='BeautiSubTemplate' class='beast.base.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[

            <taxonset id='taxonSet.$(n)' spec='beast.base.evolution.alignment.TaxonSet' alignment='@$(n)'/>

            <!-- Quasi-species tree -->

            <plugin spec='piqmee.tree.QuasiSpeciesTree' id='Tree.t:$(n)' data='@$(n)' estimate='true' taxonset='@taxonSet.$(n)'/>

            <plugin spec='piqmee.tree.QuasiSpeciesRandomTree' id='RandomTree.t:$(n)' data='@$(n)' initial='@Tree.t:$(n)' estimate='false' taxonset='@taxonSet.$(n)'>
                    <populationModel id='ConstantPopulation0.t:$(n)' spec='ConstantPopulation'>
            		    <popSize id='randomPopSize.t:$(n)' spec='parameter.RealParameter' value='1'/>
	                </populationModel>
            </plugin>

<!--            <plugin spec='piqmee.tree.QuasiSpeciesClusterTree' id='Tree.t:$(n)' data='@$(n)' estimate='true' taxonset='@taxonSet.$(n)'/>-->

            <!-- Tree likelihood -->

            <plugin spec='piqmee.likelihood.QuasiSpeciesTreeLikelihood' id="treeLikelihood.$(n)" tree="@Tree.t:$(n)" data="@data">
                <siteModel idref="SiteModel.s:$(n)"/>
                <branchRateModel spec='StrictClockModel' id='StrictClock.c:$(n)'>
                    <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>

            <plugin spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                <!--substModel will be automatically detected /-->
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0' estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0' estimate='false'/>
            </plugin>

            <!-- Tree prior -->

	        <plugin spec="piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel" id="QSBirthDeathSkySerial.t:$(n)" tree="@Tree.t:$(n)">
                <origin spec='parameter.RealParameter' id="origin.t:$(n)" value="1000" lower="0." upper="Infinity"/>
		        <reproductiveNumber spec='parameter.RealParameter' id="reproductiveNumber.t:$(n)" value="2" lower="0." dimension ="10" upper="Infinity"/>
		        <becomeUninfectiousRate spec='parameter.RealParameter' id="becomeUninfectiousRate.t:$(n)" value="1." lower="0." upper="Infinity" dimension ="1"/>
		        <samplingProportion spec='parameter.RealParameter' id="samplingProportion.t:$(n)" value="0.01" lower="0." upper="1." dimension ="1"/>
	        </plugin>

            <!-- Parameter priors -->

	        <prior id='ClockPrior.c:$(n)' x='@clockRate.c:$(n)'>
	            <distr spec="beast.base.inference.distribution.Uniform" upper='Infinity'/>
	        </prior>

	        <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'>
	            <distr spec="OneOnX"/>
	        </prior>

            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'>
                <distr spec="beast.base.inference.distribution.Exponential" mean="1.0"/>
            </prior>

            <prior id='PropInvariantPrior.s:$(n)' x='@proportionInvariant.s:$(n)'>
                <distr spec="beast.base.inference.distribution.Uniform" lower='0' upper='1'/>
            </prior>

	        <prior  id='originPrior.t:$(n)' x="@origin.t:$(n)">
		        <distr spec='beast.base.inference.distribution.Uniform' lower="0." upper="Infinity"/>
	        </prior>

	        <prior id="samplingProportionPrior.t:$(n)" x="@samplingProportion.t:$(n)">
		        <distr spec="beast.base.inference.distribution.Beta" offset="0.">
			        <parameter name="alpha" value="1." estimate="false"/>
			        <parameter name="beta" value="1." estimate="false"/>
		        </distr>
	        </prior>

	        <prior id="becomeUninfectiousRatePrior.t:$(n)" x="@becomeUninfectiousRate.t:$(n)">
		        <distr spec='beast.base.inference.distribution.LogNormalDistributionModel' offset="0.0" meanInRealSpace="false">
			        <parameter name="M" value="0." estimate="false"/>
			        <parameter name="S" value="1." estimate="false"/>
		        </distr>
	        </prior>

	        <prior id="reproductiveNumberPrior.t:$(n)" x="@reproductiveNumber.t:$(n)">
		        <distr spec='beast.base.inference.distribution.LogNormalDistributionModel' offset="0.0" meanInRealSpace="false">
			        <parameter name="M" value="0." estimate="false"/>
			        <parameter name="S" value="1." estimate="false"/>
		        </distr>
	        </prior>

            <!-- RPN calculator -->

	        <RPNcalculator spec="beast.base.inference.util.RPNcalculator" id="birth.t:$(n)" expression="reproductiveNumber.t:$(n) becomeUninfectiousRate.t:$(n) *"> <!-- s/(d+s) -->
		        <parameter idref="becomeUninfectiousRate.t:$(n)"/>
		        <parameter idref="reproductiveNumber.t:$(n)"/>
	        </RPNcalculator>

	        <RPNcalculator spec="beast.base.inference.util.RPNcalculator" id="sampling.t:$(n)" expression="becomeUninfectiousRate.t:$(n) samplingProportion.t:$(n) *">
		        <parameter idref="becomeUninfectiousRate.t:$(n)"/>
		        <parameter idref="samplingProportion.t:$(n)"/>
	        </RPNcalculator>

	        <RPNcalculator spec="beast.base.inference.util.RPNcalculator" id="death.t:$(n)" expression="becomeUninfectiousRate.t:$(n) 1 samplingProportion.t:$(n) - *"> <!-- b*S0/(d+s) -->
		        <parameter idref="becomeUninfectiousRate.t:$(n)"/>
		        <parameter idref="samplingProportion.t:$(n)"/>
	        </RPNcalculator>

            <!-- Parameter operators -->

            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>
	        <operator id='strictClockRateScaler.c:$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.c:$(n)'/>
	        <operator id='becomeUninfectiousRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="2" parameter="@becomeUninfectiousRate.t:$(n)"/>
	        <operator id='samplingScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="2" parameter="@samplingProportion.t:$(n)"/>
	        <operator id='reproductiveNumberScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@reproductiveNumber.t:$(n)"/>
	        <operator id="updownBD.t:$(n)" spec="UpDownOperator" scaleFactor=".75" weight="2">
		        <up idref="reproductiveNumber.t:$(n)"/>
		        <down idref="becomeUninfectiousRate.t:$(n)"/>
	        </operator>
	        <operator id='origScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="1" parameter="@origin.t:$(n)"/>


            <!-- Tree operators -->
	        <operator id='piqmeeTreeScaler.t:$(n)' spec='piqmee.operators.QuasiSpeciesTreeScale' scaleFactor="0.5" weight="3.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeTreeRootScaler.t:$(n)' spec='piqmee.operators.QuasiSpeciesTreeScale' scaleFactor="0.7" weight="3.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)" rootOnly="true" />
            <operator id='piqmeeNodeUniformOperator.t:$(n)' spec='piqmee.operators.QuasiSpeciesUniform' weight="5.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeHaploScaler.t:$(n)' spec='piqmee.operators.QuasiSpeciesHaplotypeScale' weight="3.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id='piqmeeHaploSequenceReAttachRandom.t:$(n)' spec='piqmee.operators.QuasiSpeciesSequenceAttachmentRandom' weight="10.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id='piqmeeHaploSequenceReAttachUniform.t:$(n)' spec='piqmee.operators.QuasiSpeciesSequenceAttachmentUniform' weight="10.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id="piqmeeHaploStartTimeReAttachUniform.t:$(n)" spec="piqmee.operators.QuasiSpeciesSequenceAttachmentUniform" weight="5.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)" firstAttachmentOnly="true"/>
            <operator id='piqmeeNarrow.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchange' isNarrow='true' weight="5.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWide.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchange' isNarrow='false' weight="1.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWilsonBalding.t:$(n)' spec='piqmee.operators.QuasiSpeciesWilsonBalding' alpha="0.2" weight="0.5" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id='piqmeeNarroweasy.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchangeEasy' isNarrow='true' weight="10.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWideeasy.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchangeEasy' isNarrow='false' weight="2.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWilsonBaldingeasy.t:$(n)' spec='piqmee.operators.QuasiSpeciesWilsonBaldingEasy' alpha="0.2" weight="2.5" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>

			<upDownOperator id='strictClockUpDownOperator.c:$(n)' spec='UpDownOperator' scaleFactor="0.75" weight="3">
				<up idref="clockRate.c:$(n)"/>
				<down idref="Tree.t:$(n)"/>
			</upDownOperator>

            <!-- Tree log -->

            <logger id='treelog.t:$(n)' spec='beast.base.inference.Logger' logEvery="1000" fileName="$(filebase).$(tree).trees" mode='tree'>
	            <log id='TreeWithMetaDataLogger.t:$(n)' spec='beast.base.evolution.TreeWithMetaDataLogger' tree='@Tree.t:$(n)'>
	            </log>
            </logger>

            <!-- Trace log elements -->

            <log id="QSTreeHeight.t:$(n)" spec="beast.base.evolution.tree.TreeHeightLogger" tree="@Tree.t:$(n)"/>
            <log id="TreeHeight.t:$(n)" spec="piqmee.util.AbsoluteTreeHeight" quasiSpeciesTree="@Tree.t:$(n)"/>

]]>

            <!-- CONNECT: tree and likelihood -->
            <connect srcID='RandomTree.t:$(n)'      targetID='mcmc'         inputName='init'          if='isInitializing'/>
            <connect method="beastfx.app.beauti.StateNodeInitialiserListInputEditor.customConnector"/>
            <connect srcID='Tree.t:$(n)'            targetID='state'        inputName='stateNode'     if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='treeLikelihood.$(n)'    targetID='likelihood'   inputName='distribution'  if="isInitializing"/>
            <connect method="beastfx.app.inputeditor.SiteModelInputEditor.customConnector"/>

            <!-- CONNECT: Priors -->
            <!-- Tree prior priors-->
            <connect srcID='QSBirthDeathSkySerial.t:$(n)'   targetID='prior' inputName='distribution' if="isInitializing"/>
            <connect srcID='originPrior.t:$(n)'             targetID='prior' inputName='distribution' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and origin.t:$(n)/estimate=true'>prior on origin.t:$(n)</connect>
            <connect srcID='samplingProportionPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and samplingProportion.t:$(n)/estimate=true'>prior on sampling proportion t:$(n)</connect>
            <connect srcID='becomeUninfectiousRatePrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and becomeUninfectiousRate.t:$(n)/estimate=true'>prior on becomeUninfectiousRate.t:$(n)</connect>
            <connect srcID='reproductiveNumberPrior.t:$(n)' targetID='prior' inputName='distribution' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and reproductiveNumber.t:$(n)/estimate=true'>prior on reproductiveNumber.t:$(n)</connect>
            <!-- Likelihoood priors-->
            <connect srcID='MutationRatePrior.s:$(n)'       targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='GammaShapePrior.s:$(n)'         targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Prior on gamma shape for partition s:$(n)</connect>
            <connect srcID='PropInvariantPrior.s:$(n)'      targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='ClockPrior.c:$(n)'              targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>

            <!-- CONNECT: State -->
            <!-- Tree prior states -->
            <plate var='p' range='origin,samplingProportion,becomeUninfectiousRate,reproductiveNumber'>
                <connect srcID='$(p).t:$(n)'            targetID='state' inputName='stateNode' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and $(p).t:$(n)/estimate=true'/>
            </plate>
            <!-- Likelihood states -->
            <connect srcID='mutationRate.s:$(n)'        targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.s:$(n)' targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'          targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)'           targetID='state' inputName='stateNode' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>

            <!-- CONNECT: Operators -->
            <!-- Tree prior operators -->
            <connect srcID='becomeUninfectiousRateScaler.t:$(n)'    targetID='mcmc' inputName='operator'     if='inposterior(QSBirthDeathSkySerial.t:$(n)) and becomeUninfectiousRate.t:$(n)/estimate=true'/>
            <connect srcID='samplingScaler.t:$(n)'                  targetID='mcmc' inputName='operator'     if='inposterior(QSBirthDeathSkySerial.t:$(n)) and samplingProportion.t:$(n)/estimate=true'/>
            <connect srcID='reproductiveNumberScaler.t:$(n)'        targetID='mcmc' inputName='operator'     if='inposterior(QSBirthDeathSkySerial.t:$(n)) and reproductiveNumber.t:$(n)/estimate=true'/>
            <connect srcID='updownBD.t:$(n)'                        targetID='mcmc' inputName='operator'     if='inposterior(QSBirthDeathSkySerial.t:$(n)) and reproductiveNumber.t:$(n)/estimate=true and becomeUninfectiousRate.t:$(n)/estimate=true'/>
            <connect srcID='origScaler.t:$(n)'                      targetID='mcmc' inputName='operator'     if='inposterior(QSBirthDeathSkySerial.t:$(n)) and origin.t:$(n)/estimate=true'/>
            <!-- Likelihood operators -->
            <connect srcID='mutationRateScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='proportionInvariantScaler.s:$(n)'   targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
            <connect srcID='gammaShapeScaler.s:$(n)'            targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='strictClockRateScaler.c:$(n)'       targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'>Scale clock rate of partition c:$(n)</connect>
            <!-- Tree prior and likelihood operators -->
            <connect srcID='strictClockUpDownOperator.c:$(n)'   targetID='mcmc' inputName='operator' if='nooperator(FixMeanRatesOperator) and inlikelihood(clockRate.c:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and clockRate.c:$(n)/estimate=true'></connect>
            <!-- Tree operators -->
            <connect srcID='piqmeeTreeScaler.t:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all internal nodes for tree t:$(n)</connect>
            <connect srcID='piqmeeTreeRootScaler.t:$(n)'                targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales root node for tree t:$(n)</connect>
            <connect srcID='piqmeeNodeUniformOperator.t:$(n)'           targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Draws new internal node heights uniformally for tree t:$(n)</connect>
            <connect srcID='piqmeeHaploScaler.t:$(n)'                   targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Scales all attachment times of one haplotype/sequence type in the tree t:$(n)</connect>
            <connect srcID='piqmeeHaploSequenceReAttachRandom.t:$(n)'   targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Changes one attachment time of a haplotype/sequence type in the tree t:$(n)</connect>
            <connect srcID='piqmeeHaploSequenceReAttachUniform.t:$(n)'  targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Changes one attachment time of a haplotype/sequence type in the tree t:$(n)</connect>
            <connect srcID='piqmeeHaploStartTimeReAttachUniform.t:$(n)' targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Changes the first attachment time of a haplotype/sequence type in the tree t:$(n)</connect>
            <connect srcID='piqmeeNarrow.t:$(n)'                        targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Narrow exchange performs local rearrangement of tree t:$(n)</connect>
            <connect srcID='piqmeeWide.t:$(n)'                          targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Wide exchange performs global rearrangement of tree t:$(n)</connect>
            <connect srcID='piqmeeWilsonBalding.t:$(n)'                 targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>
            <connect srcID='piqmeeNarroweasy.t:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>NarrowEasy exchange performs local rearrangement of tree t:$(n) without disturbing the haplotype/sequence type attachment times</connect>
            <connect srcID='piqmeeWideeasy.t:$(n)'                      targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>WideEasy exchange performs global rearrangement of tree t:$(n) without disturbing the haplotype/sequence type attachment times</connect>
            <connect srcID='piqmeeWilsonBaldingeasy.t:$(n)'             targetID='mcmc' inputName='operator' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Performs Wilson-Balding global rearrangement of tree t:$(n) without disturbing the haplotype/sequence type attachment times</connect>

            <!-- CONNECT: Logs -->
            <!-- Tree prior logs -->
            <connect srcID='QSBirthDeathSkySerial.t:$(n)' targetID='tracelog' inputName='log' if='inposterior(QSBirthDeathSkySerial.t:$(n))'/>
            <plate var='p' range='birth,death,sampling'>
                <connect srcID='$(p).t:$(n)'        targetID='tracelog' inputName='log' if='inposterior(QSBirthDeathSkySerial.t:$(n))'/>
            </plate>
            <plate var='p' range='origin,samplingProportion,becomeUninfectiousRate,reproductiveNumber'>
                <connect srcID='$(p).t:$(n)'        targetID='tracelog' inputName='log' if='inposterior(QSBirthDeathSkySerial.t:$(n)) and $(p).t:$(n)/estimate=true'/>
            </plate>
            <!-- Likelihood logs -->
            <connect srcID='treeLikelihood.$(n)'        targetID='tracelog' inputName='log' if='inlikelihood(treeLikelihood.$(n))'/>
            <connect srcID='mutationRate.s:$(n)'        targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.s:$(n)' targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'          targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)'           targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <!-- Tree logs -->
            <connect srcID='treelog.t:$(n)'         targetID='mcmc'     inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='QSTreeHeight.t:$(n)'    targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))  and Tree.t:$(n)/estimate=true'/>
            <connect srcID='TreeHeight.t:$(n)'      targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))  and Tree.t:$(n)/estimate=true'/>

        </partitiontemplate>

		<mergepoint id='substModelTemplates'/>
		<mergepoint id='piqmeeClockModelTemplates'/>
        <mergepoint id='piqmeeTreeInitializationTemplates'/>
        <mergepoint id='parametricDistributions'/>
		<mergepoint id='piqmeeTreePriorTemplates'/>

    </beauticonfig>

<!-- framework for main model -->

    <run spec="MCMC" id="mcmc" chainLength="10000000">

        <state storeEvery='5000' id='state'>
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior"/>
            <distribution spec="CompoundDistribution" id="likelihood"/>
        </distribution>

        <logger id='tracelog' logEvery="1000" fileName="$(filebase).$(tree).log" sanitiseHeaders="true" sort="smart">
            <model idref='posterior'/>
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

        <logger id='screenlog' logEvery="1000">
            <log idref="posterior"/>
      	    <ESS spec='ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>
