<beast version='2.0'
       namespace='beast.app.beauti
                 :beast.core
                 :beast.evolution.branchratemodel
                 :beast.evolution.speciation
                 :beast.evolution.tree.coalescent
                 :beast.core.util
                 :beast.evolution.nuc
                 :beast.evolution.operators
                 :beast.evolution.sitemodel
                 :beast.evolution.substitutionmodel
                 :beast.evolution.likelihood
                 :beast.evolution
                 :beast.math.distributions
                 :piqmee.operators
                 :piqmee.distributions'
       templateinfo='template for birth-death skyline model with duplicate sequences (Quasi-species model)'>

    <map name='connect' reserved='true'>beast.app.beauti.BeautiConnector</map>
    <map name='subtemplate' reserved='true'>beast.app.beauti.BeautiSubTemplate</map>
    <map name='Uniform'>beast.math.distributions.Uniform</map>
    <map name='Normal'>beast.math.distributions.Normal</map>
    <map name='OneOnX'>beast.math.distributions.OneOnX</map>
    <map name='LogNormal'>beast.math.distributions.LogNormalDistributionModel</map>
    <map name='Exponential'>beast.math.distributions.Exponential</map>
    <map name='Gamma'>beast.math.distributions.Gamma</map>
    <map name='Beta'>beast.math.distributions.Beta</map>
    <map name='LaplaceDistribution'>beast.math.distributions.LaplaceDistribution</map>
    <map name='InverseGamma'>beast.math.distributions.InverseGamma</map>
    <map name='prior'>beast.math.distributions.Prior</map>

    <beauticonfig spec='BeautiConfig'
        inputLabelMap='beast.core.MCMC.operator=Operators,
	                   beast.core.MCMC.logger=Loggers,
			           beast.evolution.sitemodel.SiteModel.mutationRate =Substitution Rate'
        inlinePlugins ='beast.core.MCMC.distribution,
                        beast.evolution.sitemodel.SiteModel.substModel,
                        beast.evolution.tree.coalescent.ExponentialGrowth,
                        beast.evolution.tree.coalescent.ConstantPopulation,
                        beast.evolution.tree.coalescent.Coalescent,
                        beast.core.State.stateNode'
        collapsedPlugins ='beast.core.MCMC.logger'
        suppressPlugins = 'beast.core.MCMC.operator,
    		               beast.core.MCMC.operatorschedule,
	                       beast.core.MCMC.state,
	                       beast.core.MCMC.distribution,
	                       beast.core.MCMC.init,
	                       beast.evolution.tree.Tree,
	                       beast.evolution.tree.Tree.trait,
                           beast.evolution.tree.Tree.taxa,
                           beast.evolution.tree.Tree.taxonset,
                           beast.util.TreeParser.initial,
                           beast.util.TreeParser.taxa,
                           beast.util.TreeParser.taxonset,
                           beast.util.TreeParser.trait,
                           beast.util.TreeParser.estimate,
                           beast.util.ClusterTree.initial,
                           beast.util.ClusterTree.taxa,
                           beast.util.ClusterTree.taxonset,
                           beast.util.ClusterTree.trait,
                           beast.util.ClusterTree.estimate,
                           beast.evolution.substitutionmodel.WAG.rates,
                           beast.evolution.substitutionmodel.WAG.frequencies,
                           beast.evolution.substitutionmodel.JTT.rates,
                           beast.evolution.substitutionmodel.JTT.frequencies,
                           beast.evolution.substitutionmodel.Blosum62.rates,
                           beast.evolution.substitutionmodel.Blosum62.frequencies,
                           beast.evolution.substitutionmodel.Dayhoff.rates,
                           beast.evolution.substitutionmodel.Dayhoff.frequencies,
                           beast.evolution.substitutionmodel.CPREV.rates,
                           beast.evolution.substitutionmodel.CPREV.frequencies,
                           beast.evolution.substitutionmodel.MTREV.rates,
                           beast.evolution.substitutionmodel.MTREV.frequencies,
                           beast.evolution.substitutionmodel.GTR.rates,
                           beast.evolution.substitutionmodel.JukesCantor.frequencies,
                           beast.math.distributions.Prior.x,
                           beast.math.distributions.MRCAPrior.tree,
                           beast.math.distributions.MRCAPrior.monophyletic,
                           beast.math.distributions.MRCAPrior.taxonset,
                           beast.evolution.branchratemodel.UCRelaxedClockModel.tree,
                           beast.evolution.branchratemodel.UCRelaxedClockModel.rateCategories,
                           beast.evolution.branchratemodel.UCRelaxedClockModel.distr,
                           beast.evolution.branchratemodel.RandomLocalClockModel.tree,
                           beast.evolution.branchratemodel.RandomLocalClockModel.meanRate,
                           beast.evolution.branchratemodel.RandomLocalClockModel.indicators,
                           beast.evolution.operators.ScaleOperator.indicator,
                           beast.core.Operator.weight,
                           beast.core.Logger.model,
                           piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel.tree,
                           piqmee.tree.QuasiSpeciesClusterTree.tree,
                           piqmee.tree.QuasiSpeciesTree.tree'>

        <panel spec='BeautiPanelConfig' panelname="Partitions" tiptext="Data Partitions"
            path='distribution/distribution[id="likelihood"]/distribution/data'
            hasPartitions="none" icon='2220.png.x' forceExpansion='FALSE'
            type='beast.evolution.alignment.Alignment'/>

		<panel spec='BeautiPanelConfig' panelname="Tip Dates" tiptext="Specify times at which taxa were sampled"
            path='tree'
            hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
            isVisible='true'/>

        <panel spec='BeautiPanelConfig' panelname="Sequence Counts" tiptext="Specify total count of sequences representing each taxon"
               path='tree'
               hasPartitions="Tree" icon='2.png.x' forceExpansion='TRUE'
               isVisible='true'/>

        <panel spec='BeautiPanelConfig' panelname="Site Model" tiptext="Site model and substitution model specifications"
            path='siteModel'
            hasPartitions="SiteModel" icon='3.png.x' forceExpansion='TRUE'/>

		<panel spec='BeautiPanelConfig' panelname="Clock Model" tiptext="Clock model"
            path='branchRateModel'
            hasPartitions="ClockModel" icon='4.png.x' forceExpansion='TRUE'/>

		<panel spec='BeautiPanelConfig' panelname="Initialization" tiptext="Initial state"
            path='state/stateNode'
            hasPartitions="none" icon='6.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false'/>

		<panel spec='BeautiPanelConfig' panelname="Priors" tiptext="Other priors"
            path='distribution/distribution[id="prior"]/distribution'
            hasPartitions="none" icon='7.png.x' forceExpansion='TRUE_START_COLLAPSED'
            type='beast.core.Distribution'/>

		<panel spec='BeautiPanelConfig' panelname="Operators" tiptext="MCMC Operator details"
            path='operator'
            hasPartitions="none" icon='8.png.x' forceExpansion='TRUE_START_COLLAPSED'
            isVisible='false' buttonStatus='ADD_ONLY'/>

		<panel spec='BeautiPanelConfig' panelname="MCMC" tiptext="MCMC parameters"
            path=''
            hasPartitions="none" icon='9.png.x' forceExpansion='TRUE'/>

		<alignmentProvider id="Import Alignment" spec='BeautiAlignmentProvider' template='@StandardPartitionTemplate'/>


        <partitiontemplate id='StandardPartitionTemplate' spec='BeautiSubTemplate' class='beast.evolution.likelihood.TreeLikelihood' mainid='mcmc'>
<![CDATA[

            <taxonset id='taxonSet.$(n)' spec='beast.evolution.alignment.TaxonSet' alignment='@$(n)'/>

            <!-- Quasi-species tree -->

            <plugin spec='piqmee.tree.QuasiSpeciesTree' id='Tree.t:$(n)' estimate='true' taxonset='@taxonSet.$(n)'>
                <!--<haplotypeCounts id="counts" spec="beast.evolution.tree.TraitSet" traitname="qscounts" taxa='@taxonSet.$(n)'/>-->
            </plugin>


            <!-- Starting tree -->

            <!--<plugin spec='piqmee.tree.QuasiSpeciesClusterTree' id='ClusterTree.t:$(n)' trait='@datetrait.$(n)' haplotypeCounts='@counts' estimate='false' initial='@Tree.t:$(n)'>-->
            <plugin spec='piqmee.tree.QuasiSpeciesClusterTree' id='ClusterTree.t:$(n)' estimate='false' initial='@Tree.t:$(n)' data='@$(n)' taxonset='@taxonSet.$(n)'/>

            <!-- Tree likelihood -->

            <plugin spec='piqmee.likelihood.QuasiSpeciesTreeLikelihood' id="treeLikelihood.$(n)" tree="@Tree.t:$(n)" origin="@origin.t:$(n)" data="@data">
                <siteModel idref="SiteModel.s:$(n)"/>
                <branchRateModel spec='StrictClockModel' id='StrictClock.c:$(n)'>
                    <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
                </branchRateModel>
            </plugin>

            <plugin spec='SiteModel' id="SiteModel.s:$(n)" gammaCategoryCount='0'>
                <!--substModel will be automatically detected /-->
                <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
                <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0'        estimate='false'/>
                <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0'         estimate='false'/>
            </plugin>

            <!-- Tree prior -->

	        <plugin spec="piqmee.distributions.QuasiSpeciesBirthDeathSkylineModel" id="QSBirthDeathSkySerial.t:$(n)" tree="@Tree.t:$(n)">
                <origin spec='parameter.RealParameter' id="origin.t:$(n)" value="100" lower="0." upper="Infinity"/>
		        <reproductiveNumber spec='parameter.RealParameter' id="reproductiveNumber.t:$(n)" value="2" lower="0." dimension ="10" upper="Infinity"/>
		        <becomeUninfectiousRate spec='parameter.RealParameter' id="becomeUninfectiousRate.t:$(n)" value="1." lower="0." upper="Infinity" dimension ="1"/>
		        <samplingProportion spec='parameter.RealParameter' id="samplingProportion.t:$(n)" value="0.01" lower="0." upper="1." dimension ="1"/>
	        </plugin>

            <!-- Parameter priors -->

	        <prior id='ClockPrior.c:$(n)' x='@clockRate.c:$(n)'>
	            <distr spec="beast.math.distributions.Uniform" upper='Infinity'/>
	        </prior>

	        <prior id='MutationRatePrior.s:$(n)' x='@mutationRate.s:$(n)'>
	            <distr spec="OneOnX"/>
	        </prior>

            <prior id='GammaShapePrior.s:$(n)' x='@gammaShape.s:$(n)'>
                <distr spec="beast.math.distributions.Exponential" mean="1.0"/>
            </prior>

            <prior id='PropInvariantPrior.s:$(n)' x='@proportionInvariant.s:$(n)'>
                <distr spec="beast.math.distributions.Uniform" lower='0' upper='1'/>
            </prior>

	        <prior  id='originPrior.t:$(n)' x="@origin.t:$(n)">
		        <distr spec='beast.math.distributions.Uniform' lower="0." upper="Infinity"/>
	        </prior>

	        <prior id="samplingProportionPrior.t:$(n)" x="@samplingProportion.t:$(n)">
		        <distr spec="beast.math.distributions.Beta" offset="0.">
			        <parameter name="alpha" value="1." estimate="false"/>
			        <parameter name="beta" value="1." estimate="false"/>
		        </distr>
	        </prior>

	        <prior id="becomeUninfectiousRatePrior.t:$(n)" x="@becomeUninfectiousRate.t:$(n)">
		        <distr spec='beast.math.distributions.LogNormalDistributionModel' offset="0.0" meanInRealSpace="false">
			        <parameter name="M" value="0." estimate="false"/>
			        <parameter name="S" value="1." estimate="false"/>
		        </distr>
	        </prior>

	        <prior id="reproductiveNumberPrior.t:$(n)" x="@reproductiveNumber.t:$(n)">
		        <distr spec='beast.math.distributions.LogNormalDistributionModel' offset="0.0" meanInRealSpace="false">
			        <parameter name="M" value="0." estimate="false"/>
			        <parameter name="S" value="1." estimate="false"/>
		        </distr>
	        </prior>

            <!-- RPN calculator -->

	        <RPNcalculator spec="beast.math.statistic.RPNcalculator" id="birth.t:$(n)" expression="reproductiveNumber.t:$(n) becomeUninfectiousRate.t:$(n) *"> <!-- s/(d+s) -->
		        <parameter idref="becomeUninfectiousRate.t:$(n)"/>
		        <parameter idref="reproductiveNumber.t:$(n)"/>
	        </RPNcalculator>

	        <RPNcalculator spec="beast.math.statistic.RPNcalculator" id="sampling.t:$(n)" expression="becomeUninfectiousRate.t:$(n) samplingProportion.t:$(n) *">
		        <parameter idref="becomeUninfectiousRate.t:$(n)"/>
		        <parameter idref="samplingProportion.t:$(n)"/>
	        </RPNcalculator>

	        <RPNcalculator spec="beast.math.statistic.RPNcalculator" id="death.t:$(n)" expression="becomeUninfectiousRate.t:$(n) 1 samplingProportion.t:$(n) - *"> <!-- b*S0/(d+s) -->
		        <parameter idref="becomeUninfectiousRate.t:$(n)"/>
		        <parameter idref="samplingProportion.t:$(n)"/>
	        </RPNcalculator>

            <!-- Parameter operators -->

            <operator id='proportionInvariantScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@proportionInvariant.s:$(n)"/>
            <operator id='mutationRateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@mutationRate.s:$(n)"/>
            <operator id='gammaShapeScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.5" weight="0.1" parameter="@gammaShape.s:$(n)"/>
	        <operator id='StrictClockRateScaler.c:$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.c:$(n)'/>
	        <operator id='becomeUninfectiousRateScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="2" parameter="@becomeUninfectiousRate.t:$(n)"/>
	        <operator id='samplingScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="2" parameter="@samplingProportion.t:$(n)"/>
	        <operator id='reproductiveNumberScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="10" parameter="@reproductiveNumber.t:$(n)"/>
	        <operator id="updownBD.t:$(n)" spec="UpDownOperator" scaleFactor=".75" weight="2">
		        <up idref="reproductiveNumber.t:$(n)"/>
		        <down idref="becomeUninfectiousRate.t:$(n)"/>
	        </operator>
	        <operator id='origScaler.t:$(n)' spec='ScaleOperator' scaleFactor=".75" weight="1" parameter="@origin.t:$(n)"/>


            <!-- Tree operators -->
	        <operator id='piqmeeTreeScaler.t:$(n)' spec='piqmee.operators.QuasiSpeciesTreeScale' scaleFactor="0.5" weight="3.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeTreeRootScaler.t:$(n)' spec='piqmee.operators.QuasiSpeciesTreeScale' scaleFactor="0.7"  weight="3.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)" rootOnly="true" />
            <operator id='piqmeeUniformOperator.t:$(n)' spec='piqmee.operators.QuasiSpeciesUniform' weight="5.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeTreeHaploScaler.t:$(n)' spec='piqmee.operators.QuasiSpeciesHaplotypeScale' weight="3.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id='piqmeeTreeHaploSeqReAttachRandom.t:$(n)' spec='piqmee.operators.QuasiSpeciesSequenceAttachmentRandom' weight="15.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id='piqmeeTreeHaploSeqReAttachUniform.t:$(n)' spec='piqmee.operators.QuasiSpeciesSequenceAttachmentUniform' weight="10.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id='piqmeeNarrow.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchange' isNarrow='true' weight="5.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWide.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchange' isNarrow='false' weight="1.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWilsonBalding.t:$(n)' spec='piqmee.operators.QuasiSpeciesWilsonBalding' alpha="0.2" weight="0.5" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
            <operator id='piqmeeNarroweasy.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchangeEasy' isNarrow='true' weight="10.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWideeasy.t:$(n)' spec='piqmee.operators.QuasiSpeciesSubtreeExchangeEasy' isNarrow='false' weight="2.0" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>
	        <operator id='piqmeeWilsonBaldingeasy.t:$(n)' spec='piqmee.operators.QuasiSpeciesWilsonBaldingEasy' alpha="0.2" weight="2.5" origin="@origin.t:$(n)" quasiSpeciesTree="@Tree.t:$(n)"/>

			<upDownOperator id='strictClockUpDownOperator.c:$(n)' spec='UpDownOperator' scaleFactor="0.75" weight="3">
				<up idref="clockRate.c:$(n)"/>
				<down idref="Tree.t:$(n)"/>
			</upDownOperator>

            <!-- Tree log -->

            <logger id='treelog.t:$(n)' spec='beast.core.Logger' logEvery="1000" fileName="$(filebase).$(tree).trees" mode='tree'>
	            <log id='TreeWithMetaDataLogger.t:$(n)' spec='beast.evolution.tree.TreeWithMetaDataLogger' tree='@Tree.t:$(n)'>
	            </log>
            </logger>

            <!-- Trace log elements -->

            <log id="QSTreeHeight.t:$(n)" spec="beast.evolution.tree.TreeHeightLogger" tree="@Tree.t:$(n)"/>
            <log id="TreeHeight.t:$(n)" spec="piqmee.util.AbsoluteTreeHeight" quasiSpeciesTree="@Tree.t:$(n)"/>

]]>

            <!-- Ensure locus is present in tree -->
            <connect srcID="locus.$(n)" targetID="Tree.t:$(n)" inputName="locus"
                     if="inlikelihood(Tree.t:$(n))"/>

            <connect srcID='treeLikelihood.$(n)'            targetID='likelihood' inputName='distribution' if="isInitializing"/>
            <connect srcID='YuleModel.t:$(n)'               targetID='prior' inputName='distribution' if="isInitializing"/>
			<connect method="beast.app.beauti.SiteModelInputEditor.customConnector"/>

            <!--<connect srcID='treelog.t:$(n)'                 targetID='mcmc' inputName='logger' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>-->
            <!--<connect srcID='RandomTree.t:$(n)'                targetID='mcmc' inputName='init'   if='isInitializing'/>-->
			<!--<connect method="beast.app.beauti.StateNodeInitialiserListInputEditor.customConnector"/>-->

            <connect srcID='ClockPrior.c:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
<!-- when FixMeanMutationRatesOperator, the prior is uniform due to the operator -->
           <!-- <connect srcID='MutationRatePrior.s:$(n)'         targetID='prior' inputName='distribution' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>

            <connect srcID='Tree.t:$(n)'                      targetID='state' inputName='stateNode' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.s:$(n)'       targetID='state' inputName='stateNode' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='state' inputName='stateNode' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='state' inputName='stateNode' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)'                 targetID='state' inputName='stateNode' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='birthRate.t:$(n)'                 targetID='state' inputName='stateNode' if='inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and birthRate.t:$(n)/estimate=true'/>


            <connect srcID='proportionInvariantScaler.s:$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Scales proportion of invariant sites parameter of partition $(n)</connect>
            <connect srcID='mutationRateScaler.s:$(n)'        targetID='mcmc' inputName='operator' if='nooperator(FixMeanMutationRatesOperator) and inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'>Scales mutation rate of partition s:$(n)</connect>
            <connect srcID='gammaShapeScaler.s:$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Scales gamma shape parameter of partition s:$(n)</connect>
            <connect srcID='StrictClockRateScaler.c:$(n)'     targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'>Scale clock rate of partition c:$(n)</connect>
            <connect srcID='YuleBirthRateScaler.t:$(n)'       targetID='mcmc' inputName='operator' if='inposterior(birthRate.t:$(n)) and birthRate.t:$(n)/estimate=true'>Scales birth rate of Yule prior for partition t:$(n)</connect>
            <connect srcID='strictClockUpDownOperator.c:$(n)' targetID='mcmc' inputName='operator'
                     if='nooperator(FixMeanRatesOperator) and inlikelihood(clockRate.c:$(n)) and inlikelihood(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and clockRate.c:$(n)/estimate=true'>
                Scale up substitution rate c:$(n) and scale down tree t:($n)
            </connect>

            <connect srcID='allTipDatesRandomWalker.t:$(n)'   targetID='mcmc' inputName='operator' if='inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true and allTipDatesRandomWalker.t:$(n)/weight!=0.0'>Estimates tip dates for tree t:$(n)</connect>

            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelTreeScaler.t:$(n)" targetID="mcmc">Scales all internal nodes for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelTreeRootScaler.t:$(n)" targetID="mcmc">Scales root node for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelUniformOperator.t:$(n)" targetID="mcmc">Draws new internal node heights uniformally for tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelSubtreeSlide.t:$(n)" targetID="mcmc">Performs subtree slide rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelNarrow.t:$(n)" targetID="mcmc">Narrow exchange performs local rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelWide.t:$(n)" targetID="mcmc">Wide exchange performs global rearrangement of tree t:$(n)</connect>
            <connect if="inposterior(YuleModel.t:$(n)) and Tree.t:$(n)/estimate=true" inputName="operator" srcID="YuleModelWilsonBalding.t:$(n)" targetID="mcmc">Performs Wilson-Balding global rearrangement of tree t:$(n)</connect>
-->
<!--            <connect srcID='treeLikelihood.$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(treeLikelihood.$(n))'/>
            <connect srcID='TreeHeight.t:$(n)'                targetID='tracelog' inputName='log' if='inposterior(Tree.t:$(n))  and Tree.t:$(n)/estimate=true'/>
            <connect srcID='proportionInvariant.s:$(n)'       targetID='tracelog' inputName='log' if='inposterior(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'/>
            <connect srcID='mutationRate.s:$(n)'              targetID='tracelog' inputName='log' if='inlikelihood(mutationRate.s:$(n)) and mutationRate.s:$(n)/estimate=true'/>
            <connect srcID='gammaShape.s:$(n)'                targetID='tracelog' inputName='log' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'/>
            <connect srcID='clockRate.c:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>
            <connect srcID='YuleModel.t:$(n)'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='birthRate.t:$(n)'                 targetID='tracelog' inputName='log' if='inposterior(YuleModel.t:$(n)) and birthRate.t:$(n)/estimate=true'/>

            <connect srcID='GammaShapePrior.s:$(n)'           targetID='prior' inputName='distribution' if='inlikelihood(gammaShape.s:$(n)) and gammaShape.s:$(n)/estimate=true'>Prior on gamma shape for partition s:$(n)</connect>
            <connect srcID='PropInvariantPrior.s:$(n)'        targetID='prior' inputName='distribution' if='inlikelihood(proportionInvariant.s:$(n)) and proportionInvariant.s:$(n)/estimate=true'>Prior on proportion invariant for partition s:$(n)</connect>
            <connect srcID='YuleBirthRatePrior.t:$(n)'        targetID='prior' inputName='distribution' if='inposterior(YuleModel.t:$(n)) and inposterior(Tree.t:$(n)) and birthRate.t:$(n)/estimate=true'>Prior on Yule birth rate for partition s:$(n)</connect>

			<mergepoint id='aux-partitiontemplate'/>-->
        </partitiontemplate>

		<mergepoint id='substModelTemplates'/>
		<mergepoint id='clockModelTemplates'/>
		<mergepoint id='piqmeeTreePriorTemplates'/>
        <mergepoint id='parametricDistributions'/>

<!-- Tree initialisation -->

<!-- Cluster tree (defaults to UPGMA) -->

        <!--<subtemplate id='ClusterTree' class='piqmee.tree.QuasiSpeciesClusterTree' mainid='ClusterTree.t:$(n)'>-->
<!--<![CDATA[-->
        <!--&lt;!&ndash;<tree spec='piqmee.tree.QuasiSpeciesClusterTree' id='ClusterTree.t:$(n)' trait='@datetrait.$(n)' haplotypeCounts='@counts' initial="@Tree.t:$(n)" estimate='false'>&ndash;&gt;-->
        <!--<tree spec='piqmee.tree.QuasispeciesClusterTree' id='ClusterTree.t:$(n)' initial="@Tree.t:$(n)" estimate='false'>-->
                <!--<taxonset idref='taxonSet.$(n)'/>-->
        <!--</tree>-->
<!--]]>-->
        <!--</subtemplate>-->

    </beauticonfig>


	<mergepoint id='misc'/>


<!-- framework for main model -->

    <run spec="MCMC" id="mcmc" chainLength="10000000">

        <state storeEvery='5000' id='state'>
        </state>

        <distribution spec="CompoundDistribution" id="posterior">
            <distribution spec="CompoundDistribution" id="prior"/>
            <distribution spec="CompoundDistribution" id="likelihood"/>
        </distribution>

        <logger id='tracelog' logEvery="1000" fileName="$(filebase).log" sort="smart" sanitiseHeaders='true'>
            <log idref="posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>

        <logger id='screenlog' logEvery="1000">
            <log idref="posterior"/>
      	    <ESS spec='ESS' name='log' arg="@posterior"/>
            <log idref="likelihood"/>
            <log idref="prior"/>
        </logger>
    </run>

</beast>

